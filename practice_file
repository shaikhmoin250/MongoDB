Microsoft Windows [Version 10.0.14393]
(c) 2016 Microsoft Corporation. All rights reserved.

C:\Users\Dell>mongo
MongoDB shell version v3.4.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.5
Server has startup warnings:
2017-07-05T11:48:45.412+0530 I CONTROL  [initandlisten]
2017-07-05T11:48:45.412+0530 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2017-07-05T11:48:45.413+0530 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2017-07-05T11:48:45.414+0530 I CONTROL  [initandlisten]
> show dbs
admin  0.000GB
local  0.000GB
> use mycustomers
switched to db mycustomers
> db
mycustomers
> db.createUser({
... user:"moin",
... pwd:"smongo",
... roles:["readWrite","dbAdmin"]
... })
Successfully added user: { "user" : "moin", "roles" : [ "readWrite", "dbAdmin" ] }
> db.createCollection('customers')
{ "ok" : 1 }
> show collections
customers
> db.customers.insert({first_name:"John", last_name:"Doe"});
WriteResult({ "nInserted" : 1 })
> db.customers.find();
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe" }
> db.customers.insert([{first_name:"Steven", last_name:"Smith"},{first_name:"Jacky", last_name:"Johnson", gender:"Male"}]);
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
> db.customers.find();
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe" }
{ "_id" : ObjectId("595c89fde11b5d72288ff583"), "first_name" : "Steven", "last_name" : "Smith" }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male" }
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
> db.customers.update({first_name:"John"},{first_name:"John", last_name:"Doe",gender:"Male"});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
> db.customers.update({first_name:"Steven"},{$set:{gender:"Male"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
> db.customers.update({first_name:"Steven"},{$set:{age:"45"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "gender" : "Male",
        "age" : "45"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
> db.customers.update({first_name:"Steven"},{$inc:{age:5}});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 16837,
                "errmsg" : "Cannot apply $inc to a value of non-numeric type. {_id: ObjectId('595c89fde11b5d72288ff583')} has the field 'age' of non-numeric type string"
        }
})
> db.customers.update({first_name:"Steven"},{$inc:{age:"5"}});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 14,
                "errmsg" : "Cannot increment with non-numeric argument: {age: \"5\"}"
        }
})
> db.customers.update({first_name:"Steven"},{$set:{age:45}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "gender" : "Male",
        "age" : 45
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
> db.customers.update({first_name:"Steven"},{$inc:{age:5}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "gender" : "Male",
        "age" : 50
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
>
> db.customers.update({first_name:"Steven"},{$unset:{age:1}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
> db.customers.update({first_name:"Mary"},{first_name:"Mary",last_name:"samson"},{upsert:true});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("595c91335d90d9722326e1f5")
})
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c91335d90d9722326e1f5"),
        "first_name" : "Mary",
        "last_name" : "samson"
}
> db.customers.update({first_name:"Steven"},{$rename:{"gender":"sex"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff583"),
        "first_name" : "Steven",
        "last_name" : "Smith",
        "sex" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c91335d90d9722326e1f5"),
        "first_name" : "Mary",
        "last_name" : "samson"
}
> db.customers.remove({first_name:"Steven"});
WriteResult({ "nRemoved" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c91335d90d9722326e1f5"),
        "first_name" : "Mary",
        "last_name" : "samson"
}
> db.customers.remove({first_name:"Mary"},{justOne:true});
WriteResult({ "nRemoved" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
>
> {
...   first_name: "Mohan",
...   last_name: "Gadekar",
...   membership: ["mem1", "mem2"],
...   address: {
...     street: "2nd Stree main",
...     city: "Mumbai"
...   },
...   contact: {
...     name: "Sneha", relationship: "friend"
...   }
... }
2017-07-05T12:53:38.163+0530 E QUERY    [thread1] SyntaxError: missing ; before statement @(shell):3:11
> db.customers.insert ([
... {
...   first_name:   "Mohan",
...   last_name:   "Gadekar",
...   membership: ["mem1", "mem2"],
...   address: {
...     street: "2nd Stree main",
...     city: "Mumbai"
...   },
...   contact: {
...     name: "Sneha", relationship: "friend"
...   }
... }
... ]
... )
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 1,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c966ee11b5d72288ff585"),
        "first_name" : "Mohan",
        "last_name" : "Gadekar",
        "membership" : [
                "mem1",
                "mem2"
        ],
        "address" : {
                "street" : "2nd Stree main",
                "city" : "Mumbai"
        },
        "contact" : {
                "name" : "Sneha",
                "relationship" : "friend"
        }
}
> db.customer.find({first_name:"Mohan"});
> db.customers.find({first_name:"Mohan"});
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }

> db.customers.find({$or:[{first_name:"Mohan"},{first_name:"Jacky"}]});
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male" }
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.update({first_name:"John"},{$set:{age:45"}});
2017-07-05T13:18:57.150+0530 E QUERY    [thread1] SyntaxError: unterminated string literal @(shell):1:53
> db.customers.update({first_name:"John"},{$set:{age:45}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male",
        "age" : 45
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male"
}
{
        "_id" : ObjectId("595c966ee11b5d72288ff585"),
        "first_name" : "Mohan",
        "last_name" : "Gadekar",
        "membership" : [
                "mem1",
                "mem2"
        ],
        "address" : {
                "street" : "2nd Stree main",
                "city" : "Mumbai"
        },
        "contact" : {
                "name" : "Sneha",
                "relationship" : "friend"
        }
}
> db.customers.update({first_name:"Jacky"},{$set:{age:50}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
> db.customers.find({age:{$gt:45});
... ^C

> db.customers.find({age:{$gt:45}});
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
> db.customers.find({age:{$gt:40}});
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
> db.customers.find({age:{$lt:40}});
> db.customers.find({age:{$lt:50}});
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
> db.customers.find({age:{$lt:50}}).pretty;
function () {
    this._prettyShell = true;
    return this;
}
> db.customers.find({age:{$lt:50}}).pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male",
        "age" : 45
}
> db.customers.find({"address.city":"Mumbai"});
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.find({membership:"mem1"});
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.find().sort({last_name:1});
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
> db.customers.find().sort({last_name:1}).pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male",
        "age" : 45
}
{
        "_id" : ObjectId("595c966ee11b5d72288ff585"),
        "first_name" : "Mohan",
        "last_name" : "Gadekar",
        "membership" : [
                "mem1",
                "mem2"
        ],
        "address" : {
                "street" : "2nd Stree main",
                "city" : "Mumbai"
        },
        "contact" : {
                "name" : "Sneha",
                "relationship" : "friend"
        }
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male",
        "age" : 50
}
> db.customers.find().sort({last_name:-1}).preety;
>
bye

C:\Users\Dell>mongo
MongoDB shell version v3.4.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.5
Server has startup warnings:
2017-07-05T11:48:45.412+0530 I CONTROL  [initandlisten]
2017-07-05T11:48:45.412+0530 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2017-07-05T11:48:45.413+0530 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2017-07-05T11:48:45.414+0530 I CONTROL  [initandlisten]
> db
test
> use mycustomers
switched to db mycustomers
> db.customers.find().sort({last_name:-1}).pretty();
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male",
        "age" : 50
}
{
        "_id" : ObjectId("595c966ee11b5d72288ff585"),
        "first_name" : "Mohan",
        "last_name" : "Gadekar",
        "membership" : [
                "mem1",
                "mem2"
        ],
        "address" : {
                "street" : "2nd Stree main",
                "city" : "Mumbai"
        },
        "contact" : {
                "name" : "Sneha",
                "relationship" : "friend"
        }
}
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male",
        "age" : 45
}
> db.customers.find().count();
3
> db.customers.find({gender:"Male"}).count();
2
> db.customers.find().limit(2);
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
> db.customers.find().limit(2).sort({lastname:1});
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
> db.customers.find().limit(2).sort({lastname:1}).pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male",
        "age" : 45
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male",
        "age" : 50
}
> db.customers.find().forEach(function(doc){print("Customer Name:"+doc.first_name)});
Customer Name:John
Customer Name:Jacky
Customer Name:Mohan
> db.customers.find().skip();
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.find().skip(1);
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.find().skip(3);
> ^C
bye

C:\Users\Dell>mongo
MongoDB shell version v3.4.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.5
Server has startup warnings:
2017-07-05T11:48:45.412+0530 I CONTROL  [initandlisten]
2017-07-05T11:48:45.412+0530 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2017-07-05T11:48:45.413+0530 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2017-07-05T11:48:45.414+0530 I CONTROL  [initandlisten]
> db
test
> use mycustomers
switched to db mycustomers
> db.customers.find().skip(2);
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.find().skip(0);
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.find().explain("executionStats");
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "mycustomers.customers",
                "indexFilterSet" : false,
                "parsedQuery" : {

                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "executionStats" : {
                "executionSuccess" : true,
                "nReturned" : 3,
                "executionTimeMillis" : 130,
                "totalKeysExamined" : 0,
                "totalDocsExamined" : 3,
                "executionStages" : {
                        "stage" : "COLLSCAN",
                        "nReturned" : 3,
                        "executionTimeMillisEstimate" : 31,
                        "works" : 5,
                        "advanced" : 3,
                        "needTime" : 1,
                        "needYield" : 0,
                        "saveState" : 1,
                        "restoreState" : 1,
                        "isEOF" : 1,
                        "invalidates" : 0,
                        "direction" : "forward",
                        "docsExamined" : 3
                }
        },
        "serverInfo" : {
                "host" : "DESKTOP-15BAEN8",
                "port" : 27017,
                "version" : "3.4.5",
                "gitVersion" : "520b8f3092c48d934f0cd78ab5f40fe594f96863"
        },
        "ok" : 1
}
> db.customers.ensureIndex();
{
        "ok" : 0,
        "errmsg" : "The field 'key' must be an object, but got undefined",
        "code" : 14,
        "codeName" : "TypeMismatch"
}
> db.customers.ensureIndex({"age":1});
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db.customers.ensureIndex({"age":0});
{
        "ok" : 0,
        "errmsg" : "Values in the index key pattern cannot be 0.",
        "code" : 67,
        "codeName" : "CannotCreateIndex"
}
> db.customers.ensureIndex({"age":3});
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "ok" : 1
}
> db.customers.getIndexes();
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "mycustomers.customers"
        },
        {
                "v" : 2,
                "key" : {
                        "age" : 1
                },
                "name" : "age_1",
                "ns" : "mycustomers.customers"
        },
        {
                "v" : 2,
                "key" : {
                        "age" : 3
                },
                "name" : "age_3",
                "ns" : "mycustomers.customers"
        }
]
> db.customers.dropIndexes();
{
        "nIndexesWas" : 3,
        "msg" : "non-_id indexes dropped for collection",
        "ok" : 1
}
> db.customers.getIndexes();
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "mycustomers.customers"
        }
]
> db.customers.find();
{ "_id" : ObjectId("595c8714e11b5d72288ff582"), "first_name" : "John", "last_name" : "Doe", "gender" : "Male", "age" : 45 }
{ "_id" : ObjectId("595c89fde11b5d72288ff584"), "first_name" : "Jacky", "last_name" : "Johnson", "gender" : "Male", "age" : 50 }
{ "_id" : ObjectId("595c966ee11b5d72288ff585"), "first_name" : "Mohan", "last_name" : "Gadekar", "membership" : [ "mem1", "mem2" ], "address" : { "street" : "2nd Stree main", "city" : "Mumbai" }, "contact" : { "name" : "Sneha", "relationship" : "friend" } }
> db.customers.update({first_name:"Mohan"},{$set:{gender:"female"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("595c8714e11b5d72288ff582"),
        "first_name" : "John",
        "last_name" : "Doe",
        "gender" : "Male",
        "age" : 45
}
{
        "_id" : ObjectId("595c89fde11b5d72288ff584"),
        "first_name" : "Jacky",
        "last_name" : "Johnson",
        "gender" : "Male",
        "age" : 50
}
{
        "_id" : ObjectId("595c966ee11b5d72288ff585"),
        "first_name" : "Mohan",
        "last_name" : "Gadekar",
        "membership" : [
                "mem1",
                "mem2"
        ],
        "address" : {
                "street" : "2nd Stree main",
                "city" : "Mumbai"
        },
        "contact" : {
                "name" : "Sneha",
                "relationship" : "friend"
        },
        "gender" : "female"
}
> db.customers.aggregate([{$group :{_id:"$gender", Alias:{$sum:1}}}]);
{ "_id" : "female", "Alias" : 1 }
{ "_id" : "Male", "Alias" : 2 }

